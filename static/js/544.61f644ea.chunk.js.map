{"version":3,"file":"static/js/544.61f644ea.chunk.js","mappings":"yRAyDA,EApDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,GAAY,OAAQN,GACrC,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAA0BN,EAAAA,EAAAA,WAAS,GAAnC,eAAOO,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIH,GAAa,GAFjB,UAGuBI,EAAAA,EAAAA,GAAeP,GAAUQ,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,IAAX,IAHtD,OAGUA,EAHV,OAIIZ,GAAY,OAAIY,IAJpB,gDAMIN,EAAS,KAAMO,SANnB,yBAQIT,GAAa,GARjB,6EADc,uBAAC,WAAD,wBAadU,EACD,GAAE,CAACb,KAGF,gCACGE,IAAa,SAACY,EAAA,EAAD,IACbV,IACC,0BACE,uBAAIA,OAGNF,IACA,wBACGJ,GACCA,EAASiB,KAAI,SAAAC,GACX,OACE,2BACE,wBAAKA,EAAMC,QACX,gBACEC,IAAG,8CAAyCF,EAAMG,cAClDC,IAAKJ,EAAMC,KACXI,MAAM,YALDL,EAAMM,GASlB,QAKZ,C,yHCrDDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCACVC,EAAW,QAEXxB,EAAc,SAACyB,EAAM/B,EAASgC,GAClC,OAAQD,GACN,IAAK,WACH,MAAM,+BAAN,OAAsCF,GACxC,IAAK,YACH,MAAM,UAAN,OAAiB7B,EAAjB,oBAAoC6B,EAApC,qBAAwDC,GAC1D,IAAK,OACH,MAAM,UAAN,OAAiB9B,EAAjB,4BAA4C6B,EAA5C,qBAAgEC,GAClE,IAAK,UACH,MAAM,UAAN,OAAiB9B,EAAjB,4BAA4C6B,EAA5C,gCACF,IAAK,cACH,MAAM,yBAAN,OAAgCA,EAAhC,qBAAoDC,EAApD,kBAAsEE,EAAtE,+BACF,QACEC,QAAQC,IAAI,WAEjB,EAEKtB,EAAc,mCAAG,WAAMP,GAAN,8EACf8B,EAAWP,EAAAA,EAAAA,IAAA,UAAavB,IADT,kBAGd8B,GAHc,2CAAH,qD","sources":["components/Cast/Cast.jsx","services/moviedb-api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getEndPoint, fetchMovieData } from 'services/moviedb-api';\nimport IsLoading from 'components/IsLoading';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castList, setCastList] = useState([]);\n  const endPoint = getEndPoint('cast', movieId);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    async function getCast() {\n      try {\n        setIsLoading(true);\n        const cast = await fetchMovieData(endPoint).then(r => r.data.cast);\n        setCastList([...cast]);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getCast();\n  }, [endPoint]);\n\n  return (\n    <>\n      {isLoading && <IsLoading />}\n      {error && (\n        <div>\n          <p>{error}</p>\n        </div>\n      )}\n      {!isLoading && (\n        <ul>\n          {castList &&\n            castList.map(actor => {\n              return (\n                <li key={actor.id}>\n                  <h2>{actor.name}</h2>\n                  <img\n                    src={`https://image.tmdb.org/t/p/original/${actor.profile_path}`}\n                    alt={actor.name}\n                    width=\"200px\"\n                  />\n                </li>\n              );\n            })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n\n/// Зробити аборт контролер в useEffect\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '326ecd742c922271411e34618fb1e345';\nconst language = 'en-US';\n\nconst getEndPoint = (path, movieId, query) => {\n  switch (path) {\n    case 'trending':\n      return `/trending/movie/day?api_key=${API_KEY}`;\n    case 'movieInfo':\n      return `/movie/${movieId}?api_key=${API_KEY}&language=${language}`;\n    case 'cast':\n      return `/movie/${movieId}/credits?api_key=${API_KEY}&language=${language}`;\n    case 'reviews':\n      return `/movie/${movieId}/reviews?api_key=${API_KEY}&$language={language}&page=1`;\n    case 'searchMovie':\n      return `/search/movie?api_key=${API_KEY}&language=${language}&query=${query}&page=1&include_adult=false`;\n    default:\n      console.log('default');\n  }\n};\n\nconst fetchMovieData = async endPoint => {\n  const response = axios.get(`${endPoint}`);\n\n  return response;\n};\n\nexport { getEndPoint, fetchMovieData };\n"],"names":["movieId","useParams","useState","castList","setCastList","endPoint","getEndPoint","isLoading","setIsLoading","error","setError","useEffect","fetchMovieData","then","r","data","cast","message","getCast","IsLoading","map","actor","name","src","profile_path","alt","width","id","axios","API_KEY","language","path","query","console","log","response"],"sourceRoot":""}