{"version":3,"file":"static/js/947.36328ff8.chunk.js","mappings":"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","sources":["components/Error/Error.styled.jsx","components/Error/Error.jsx","components/MovieInfoItem/MovieInfoItem.styled.jsx","components/MovieInfoItem/MovieInfoItem.jsx","pages/MovieInfo/MovieInfo.jsx","services/getYear.js","services/moviedb-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ErrorWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 30px;\n  margin-top: 100px;\n  color: #fff;\n  font-size: 20px;\n`;\n\nexport const ErrorImg = styled.img`\n  display: block;\n  width: 100px;\n`;\n","import PropTypes from 'prop-types';\nimport { ErrorWrapper, ErrorImg } from './Error.styled';\nimport Warning from './Warning.png';\n\nconst Error = ({ message }) => {\n  return (\n    <ErrorWrapper>\n      <ErrorImg src={Warning} alt=\"warning\" />\n      <div>\n        <p>Sorry there was an error. Please, reload the page! </p>\n        <p>Code: {message}</p>\n      </div>\n    </ErrorWrapper>\n  );\n};\n\nexport default Error;\n\nError.propTypes = {\n  message: PropTypes.string,\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Button = styled(Link)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  width: 200px;\n  height: 32px;\n  padding: 5px 20px;\n  margin: 0 auto;\n  margin-top: 30px;\n  border: 1px solid #fff;\n  font-size: 16px;\n  font-weight: 700;\n  text-decoration: none;\n  text-align: center;\n  color: #fff;\n  background-color: ${({ active }) => {\n    return active === 'true' ? '#e20712' : 'transparent';\n  }};\n  -webkit-box-shadow: -1px 0px 12px -3px rgba(255, 255, 255, 1);\n  -moz-box-shadow: -1px 0px 12px -3px rgba(255, 255, 255, 1);\n  box-shadow: -1px 0px 12px -3px rgba(255, 255, 255, 1);\n  transition: all 250ms;\n\n  &:hover,\n  &:focus-visible {\n    background-color: #e20712;\n    transform: scale(1.1);\n    -webkit-box-shadow: -1px 0px 12px 1px rgba(255, 255, 255, 1);\n    -moz-box-shadow: -1px 0px 12px 1px rgba(255, 255, 255, 1);\n    box-shadow: -1px 0px 12px 1px rgba(255, 255, 255, 1);\n  }\n`;\n\nexport const MovieInfoWrapper = styled.div`\n  display: flex;\n  padding: 30px 0;\n  gap: 30px;\n  align-items: stretch;\n`;\n\nexport const ImageThumb = styled.div`\n  width: 400px;\n  height: 600px;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 400px;\n  height: auto;\n`;\n\nexport const MovieInfoTextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  color: #fff;\n`;\n\nexport const MovieInfoTitle = styled.h1`\n  font-size: 50px;\n`;\n\nexport const MovieInfoRate = styled.p`\n font-size: 24px;  \n color: ${({ rate }) => {\n   if (rate < 50) {\n     return 'red';\n   } else if (rate > 50 && rate < 80) {\n     return 'yellow';\n   } else {\n     return 'green';\n   }\n }}}\n`;\n\nexport const MovieInfoSubTitle = styled.h2`\n  font-size: 32px;\n`;\n\nexport const MovieInfoText = styled.p`\n  font-size: 20px;\n  max-width: 80%;\n`;\n\nexport const MovieInfoBtnList = styled.ul`\n  display: flex;\n  justify-content: center;\n  gap: 30px;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  MovieInfoWrapper,\n  ImageThumb,\n  Image,\n  MovieInfoTextWrapper,\n  MovieInfoTitle,\n  MovieInfoRate,\n  MovieInfoSubTitle,\n  MovieInfoText,\n} from './MovieInfoItem.styled';\nimport getFullYear from '../../services/getYear';\nimport NoImage from './noposterdefault.png';\n\nconst MovieInfoItem = ({ movieInfo }) => {\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = movieInfo;\n\n  const release = release_date ? getFullYear(release_date) : 'Unknown';\n  const movieRate = Math.round(vote_average * 10);\n\n  return (\n    <MovieInfoWrapper>\n      <ImageThumb>\n        <Image\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/original/${poster_path}`\n              : NoImage\n          }\n          alt={original_title}\n        ></Image>\n      </ImageThumb>\n      <MovieInfoTextWrapper>\n        <MovieInfoTitle>{`${original_title} (${release})`}</MovieInfoTitle>\n        <MovieInfoRate rate={movieRate}>User Score: {movieRate}%</MovieInfoRate>\n        <MovieInfoSubTitle>Overview</MovieInfoSubTitle>\n        <MovieInfoText>{overview}</MovieInfoText>\n        <MovieInfoSubTitle>Genres</MovieInfoSubTitle>\n        <MovieInfoText>\n          {genres &&\n            genres.map(({ id, name }, index, array) => {\n              return index !== array.length - 1 ? (\n                <span key={id}>{name}, </span>\n              ) : (\n                <span key={id}>{name}</span>\n              );\n            })}\n        </MovieInfoText>\n      </MovieInfoTextWrapper>\n    </MovieInfoWrapper>\n  );\n};\n\nexport default MovieInfoItem;\n\nMovieInfoItem.propTypes = {\n  movieInfo: PropTypes.shape({\n    poster_path: PropTypes.string,\n    original_title: PropTypes.string,\n    release_date: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.array,\n  }),\n};\n","import { useEffect, useRef, useState, Suspense } from 'react';\nimport { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { getEndPoint, fetchMovieData } from 'services/moviedb-api';\nimport { RiArrowGoBackFill } from 'react-icons/ri';\nimport { animateScroll as scroll } from 'react-scroll';\n\nimport IsLoading from 'components/IsLoading';\nimport Error from 'components/Error';\nimport MovieInfoItem from 'components/MovieInfoItem';\nimport {\n  Button,\n  MovieInfoBtnList,\n} from 'components/MovieInfoItem/MovieInfoItem.styled';\n\nconst Movie = () => {\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeBtn, setActiveBtn] = useState('');\n\n  const handleMovieBtnClick = e => {\n    setActiveBtn(e.target.id);\n    scroll.scrollTo(730);\n  };\n\n  useEffect(() => {\n    const endPoint = getEndPoint('movieInfo', movieId);\n    async function getMoviInfo() {\n      try {\n        setIsLoading(true);\n        const movie = await fetchMovieData(endPoint).then(r => r.data);\n        setMovie({ ...movie });\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getMoviInfo();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <IsLoading />}\n      {error && <Error />}\n      {!isLoading && !error && (\n        <div>\n          <Button to={backLinkLocationRef.current}>\n            {<RiArrowGoBackFill />} GO BACK\n          </Button>\n          <MovieInfoItem movieInfo={movie} />\n          <MovieInfoBtnList>\n            <li>\n              <Button\n                to=\"cast\"\n                id=\"cast\"\n                onClick={handleMovieBtnClick}\n                active={(activeBtn === 'cast').toString()}\n              >\n                Cast\n              </Button>\n            </li>\n            <li>\n              <Button\n                to=\"reviews\"\n                id=\"reviews\"\n                onClick={handleMovieBtnClick}\n                active={(activeBtn === 'reviews').toString()}\n              >\n                Reviews\n              </Button>\n            </li>\n          </MovieInfoBtnList>\n          <Suspense fallback={<IsLoading />}>\n            <Outlet />\n          </Suspense>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Movie;\n","export default function getFullYear(date) {\n  return new Date(date).getFullYear();\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '326ecd742c922271411e34618fb1e345';\nconst language = 'en-US';\n\nconst getEndPoint = (path, movieId, query) => {\n  switch (path) {\n    case 'trending':\n      return `/trending/movie/day?api_key=${API_KEY}`;\n    case 'movieInfo':\n      return `/movie/${movieId}?api_key=${API_KEY}&language=${language}`;\n    case 'cast':\n      return `/movie/${movieId}/credits?api_key=${API_KEY}&language=${language}`;\n    case 'reviews':\n      return `/movie/${movieId}/reviews?api_key=${API_KEY}&$language={language}&page=1`;\n    case 'searchMovie':\n      return `/search/movie?api_key=${API_KEY}&language=${language}&query=${query}&page=1&include_adult=false`;\n    default:\n      console.log('default');\n  }\n};\n\nconst fetchMovieData = async endPoint => {\n  const response = axios.get(`${endPoint}`);\n\n  return response;\n};\n\nexport { getEndPoint, fetchMovieData };\n"],"names":["ErrorWrapper","styled","ErrorImg","message","src","Warning","alt","Button","Link","active","MovieInfoWrapper","ImageThumb","Image","MovieInfoTextWrapper","MovieInfoTitle","MovieInfoRate","rate","MovieInfoSubTitle","MovieInfoText","MovieInfoBtnList","movieInfo","poster_path","original_title","release_date","vote_average","overview","genres","release","getFullYear","movieRate","Math","round","NoImage","map","index","array","id","name","length","location","useLocation","backLinkLocationRef","useRef","state","from","movieId","useParams","useState","movie","setMovie","isLoading","setIsLoading","error","setError","activeBtn","setActiveBtn","handleMovieBtnClick","e","target","scroll","useEffect","endPoint","getEndPoint","fetchMovieData","then","r","data","getMoviInfo","IsLoading","Error","to","current","onClick","toString","Suspense","fallback","date","Date","axios","API_KEY","language","path","query","console","log","response"],"sourceRoot":""}