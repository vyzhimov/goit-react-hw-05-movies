{"version":3,"file":"static/js/805.2a0e955f.chunk.js","mappings":"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","sources":["components/Error/Error.styled.jsx","components/Error/Error.jsx","components/MoviesList/MoviesList.styled.jsx","components/NoResult/NoResult.styled.jsx","components/NoResult/NoResult.jsx","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.js","pages/Home/Home.js","services/getYear.js","services/moviedb-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ErrorWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 30px;\n  margin-top: 100px;\n  color: #fff;\n  font-size: 20px;\n`;\n\nexport const ErrorImg = styled.img`\n  display: block;\n  width: 100px;\n`;\n","import PropTypes from 'prop-types';\nimport { ErrorWrapper, ErrorImg } from './Error.styled';\nimport Warning from './Warning.png';\n\nconst Error = ({ message }) => {\n  return (\n    <ErrorWrapper>\n      <ErrorImg src={Warning} alt=\"warning\" />\n      <div>\n        <p>Sorry there was an error. Please, reload the page! </p>\n        <p>Code: {message}</p>\n      </div>\n    </ErrorWrapper>\n  );\n};\n\nexport default Error;\n\nError.propTypes = {\n  message: PropTypes.string,\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MovieList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  margin: 30px 0;\n`;\n\nexport const MovieListItem = styled.li`\n  display: flex;\n  width: calc((100% - 90px) / 4);\n`;\n\nexport const MovieItemLink = styled(Link)`\n  display: block;\n  width: 100%;\n  transition: all 250ms ease-in-out;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n    -webkit-box-shadow: -1px 0px 12px 1px rgba(255, 255, 255, 1);\n    -moz-box-shadow: -1px 0px 12px 1px rgba(255, 255, 255, 1);\n    box-shadow: -1px 0px 12px 1px rgba(255, 255, 255, 1);\n  }\n`;\n\nexport const MovieItemImage = styled.img`\n  width: 100%;\n`;\n\nexport const MovieItemTextWrapper = styled.div`\n  display: flex;\n  justify-conten: center;\n  align-items: center;\n  padding: 15px 10px;\n`;\n\nexport const MovieItemTitle = styled.p`\n  display: block;\n  font-size: 20px;\n  font-weight: 500;\n  color: #fff;\n  text-align: center;\n  margin: 0 auto;\n`;\n","import styled from '@emotion/styled';\n\nexport const NoResultImage = styled.img`\n  display: block;\n  margin: auto;\n`;\n","import NoResultPicture from './noresult.png';\nimport { NoResultImage } from './NoResult.styled';\n\nconst NoResult = () => {\n  return <NoResultImage src={NoResultPicture} alt=\"No result\"></NoResultImage>;\n};\n\nexport default NoResult;\n","import PropTypes from 'prop-types';\n\nimport getFullYear from 'services/getYear';\nimport {\n  MovieList,\n  MovieListItem,\n  MovieItemLink,\n  MovieItemImage,\n  MovieItemTextWrapper,\n  MovieItemTitle,\n} from './MoviesList.styled';\nimport NoImage from './noposter.jpg';\nimport NoResult from 'components/NoResult';\n\nconst TrendingMoviesList = ({ trendingMovies, location }) => {\n  const filteredMovies = trendingMovies.filter(\n    movie => movie.original_language === 'en'\n  );\n  return (\n    <>\n      <MovieList>\n        {filteredMovies.length !== 0 ? (\n          filteredMovies.map(\n            ({ id, backdrop_path, original_title, release_date }) => {\n              const release = release_date\n                ? getFullYear(release_date)\n                : 'Unknown';\n              return (\n                <MovieListItem key={id}>\n                  <MovieItemLink\n                    to={`/movies/${id}`}\n                    state={{ from: location }}\n                  >\n                    <MovieItemImage\n                      src={\n                        backdrop_path\n                          ? `https://image.tmdb.org/t/p/original/${backdrop_path}`\n                          : `${NoImage}`\n                      }\n                      alt={original_title}\n                      width=\"200\"\n                    ></MovieItemImage>\n                    <MovieItemTextWrapper>\n                      <MovieItemTitle>{`${original_title} (${release})`}</MovieItemTitle>\n                    </MovieItemTextWrapper>\n                  </MovieItemLink>\n                </MovieListItem>\n              );\n            }\n          )\n        ) : (\n          <NoResult />\n        )}\n      </MovieList>\n    </>\n  );\n};\n\nexport default TrendingMoviesList;\n\nTrendingMoviesList.propTypes = {\n  trendingMovies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      backdrop_path: PropTypes.string,\n      original_title: PropTypes.string,\n      release_date: PropTypes.string,\n    })\n  ),\n  location: PropTypes.object,\n};\n","import styled from '@emotion/styled';\n\nexport const TrendingListTitle = styled.h1`\n  color: #fff;\n  margin-top: 30px;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getEndPoint, fetchMovieData } from 'services/moviedb-api';\n\nimport IsLoading from 'components/IsLoading';\nimport Error from 'components/Error';\nimport { TrendingListTitle } from './Home.styled';\nimport MoviesList from 'components/MoviesList';\n\nconst Home = () => {\n  const location = useLocation();\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const endPoint = getEndPoint('trending');\n\n    async function FetchTrendingMovies() {\n      try {\n        setIsLoading(true);\n        const movies = await fetchMovieData(endPoint).then(r => r.data.results);\n        setTrendingMovies([...movies]);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    FetchTrendingMovies();\n  }, []);\n\n  return (\n    <>\n      {isLoading && <IsLoading />}\n      {error && <Error message={error} />}\n      {!isLoading && !error && (\n        <>\n          <TrendingListTitle>Trending Movies</TrendingListTitle>\n          <MoviesList trendingMovies={trendingMovies} location={location} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","export default function getFullYear(date) {\n  return new Date(date).getFullYear();\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '326ecd742c922271411e34618fb1e345';\nconst language = 'en-US';\n\nconst getEndPoint = (path, movieId, query) => {\n  switch (path) {\n    case 'trending':\n      return `/trending/movie/day?api_key=${API_KEY}`;\n    case 'movieInfo':\n      return `/movie/${movieId}?api_key=${API_KEY}&language=${language}`;\n    case 'cast':\n      return `/movie/${movieId}/credits?api_key=${API_KEY}&language=${language}`;\n    case 'reviews':\n      return `/movie/${movieId}/reviews?api_key=${API_KEY}&$language={language}&page=1`;\n    case 'searchMovie':\n      return `/search/movie?api_key=${API_KEY}&language=${language}&query=${query}&page=1&include_adult=false`;\n    default:\n      console.log('default');\n  }\n};\n\nconst fetchMovieData = async endPoint => {\n  const response = axios.get(`${endPoint}`);\n\n  return response;\n};\n\nexport { getEndPoint, fetchMovieData };\n"],"names":["ErrorWrapper","styled","ErrorImg","message","src","Warning","alt","MovieList","MovieListItem","MovieItemLink","Link","MovieItemImage","MovieItemTextWrapper","MovieItemTitle","NoResultImage","NoResultPicture","trendingMovies","location","filteredMovies","filter","movie","original_language","length","map","id","backdrop_path","original_title","release_date","release","getFullYear","to","state","from","NoImage","width","TrendingListTitle","useLocation","useState","setTrendingMovies","isLoading","setIsLoading","error","setError","useEffect","endPoint","getEndPoint","fetchMovieData","then","r","data","results","movies","FetchTrendingMovies","IsLoading","Error","MoviesList","date","Date","axios","API_KEY","language","path","movieId","query","console","log","response"],"sourceRoot":""}